================================================================================
Constructor tag and application
================================================================================

@Nil
@Cons{x, xs}

--------------------------------------------------------------------------------

(source_file
  (application_expression
    function: (constructor_tag
      (identifier))
    argument: (implicit_application
      (constructor_tag
        (identifier))
      (name
        (identifier))
      (name
        (identifier)))))

================================================================================
Enum symbols
================================================================================

&Red
&Green
&Blue

--------------------------------------------------------------------------------

(source_file
  (application_expression
    (application_expression
      (enum_symbol
        (identifier))
      (enum_symbol
        (identifier)))
    (enum_symbol
      (identifier))))

================================================================================
Enum literal
================================================================================

enum{&Red, &Green, &Blue}

--------------------------------------------------------------------------------

(source_file
  (enum_type
    (enum_symbol
      (identifier))
    (enum_symbol
      (identifier))
    (enum_symbol
      (identifier))))

================================================================================
Superposition
================================================================================

&L{a, b}

--------------------------------------------------------------------------------

(source_file
  (implicit_application
    (enum_symbol
      (identifier))
    (name
      (identifier))
    (name
      (identifier))))

================================================================================
Fork expression
================================================================================

fork L:a elif:b else:c

--------------------------------------------------------------------------------

(source_file
  (fork_expression
    (name
      (identifier))
    (name
      (identifier))
    (name
      (identifier))
    (name
      (identifier))))

================================================================================
Trust expression
================================================================================

trust dangerous_op

--------------------------------------------------------------------------------

(source_file
  (trust_expression
    (name
      (identifier))))

================================================================================
Tilde match
================================================================================

~ expr {
  @Zero: z
  @Succ{n}: s(n)
}

--------------------------------------------------------------------------------

(source_file
  (tilde_match
    (name
      (identifier))
    (constructor_tag
      (identifier))
    (application_expression
      function: (application_expression
        function: (name
          (identifier))
        argument: (implicit_application
          (constructor_tag
            (identifier))
          (name
            (identifier))))
      (ERROR)
      argument: (application_expression
        function: (name
          (identifier))
        (name
          (identifier))))))

================================================================================
Let expression
================================================================================

x = 5; x + 1

--------------------------------------------------------------------------------

(source_file
  (let_expression
    (identifier)
    (literal
      (integer_literal))
    (binary_expression
      (name
        (identifier))
      (literal
        (integer_literal)))))

================================================================================
Type check expression
================================================================================

x :: Nat

--------------------------------------------------------------------------------

(source_file
  (type_check
    (name
      (identifier))
    (natural_type)))

================================================================================
Unit literal
================================================================================

()

--------------------------------------------------------------------------------

(source_file
  (unit_literal))

================================================================================
Comments
================================================================================

# Line comment
{- Block comment -}

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (block_comment))