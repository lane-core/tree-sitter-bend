================================================================================
Multi-line function parameters
================================================================================

def app
  ( A: Set
  , B: Set
  , a: A
  , b: A
  , f: A -> B
  , e: A{a == b}
  ) -> B{f(a) == f(b)}:
  rewrite e
  {==}

--------------------------------------------------------------------------------

(source_file
  (function_definition
    name: (name
      (identifier))
    parameters: (parameters
      (parameter
        (identifier)
        (type_universe))
      (parameter
        (identifier)
        (type_universe))
      (parameter
        (identifier)
        (name
          (identifier)))
      (parameter
        (identifier)
        (name
          (identifier)))
      (parameter
        (identifier)
        (function_type
          (name
            (identifier))
          (name
            (identifier))))
      (parameter
        (identifier)
        (equality_type
          (name
            (identifier))
          (name
            (identifier))
          (name
            (identifier)))))
    return_type: (equality_type
      (name
        (identifier))
      (application_expression
        function: (name
          (identifier))
        (name
          (identifier)))
      (application_expression
        function: (name
          (identifier))
        (name
          (identifier))))
    body: (rewrite_expression
      (name
        (identifier))
      (reflexivity_proof))))

================================================================================
Multi-line parameters with complex types
================================================================================

def fold
  ( A: Set
  , B: A -> Set
  , P: Set
  , w: W(A, B)
  , F: A -> P
  ) -> P:
  body

--------------------------------------------------------------------------------

(source_file
  (function_definition
    name: (name
      (identifier))
    parameters: (parameters
      (parameter
        (identifier)
        (type_universe))
      (parameter
        (identifier)
        (function_type
          (name
            (identifier))
          (type_universe)))
      (parameter
        (identifier)
        (type_universe))
      (parameter
        (identifier)
        (type_application
          (name
            (identifier))
          (name
            (identifier))
          (name
            (identifier))))
      (parameter
        (identifier)
        (function_type
          (name
            (identifier))
          (name
            (identifier)))))
    return_type: (name
      (identifier))
    body: (name
      (identifier))))

================================================================================
Zero-argument function with parentheses
================================================================================

def main() -> Nat:
  42n

--------------------------------------------------------------------------------

(source_file
  (function_definition
    name: (name
      (identifier))
    parameters: (parameters)
    return_type: (natural_type)
    body: (literal
      (nat_literal))))

================================================================================
Generic function with multi-line params
================================================================================

def complex<T, U>
  ( transform: T -> U
  , items: T[]
  , default: U
  ) -> U[]:
  body

--------------------------------------------------------------------------------

(source_file
  (function_definition
    name: (name
      (identifier))
    (type_parameters
      (type_parameter
        (identifier))
      (type_parameter
        (identifier)))
    parameters: (parameters
      (parameter
        (identifier)
        (function_type
          (name
            (identifier))
          (name
            (identifier))))
      (parameter
        (identifier)
        (list_type
          (name
            (identifier))))
      (parameter
        (identifier)
        (name
          (identifier))))
    return_type: (list_type
      (name
        (identifier)))
    body: (name
      (identifier))))